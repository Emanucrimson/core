// Code generated by protoc-gen-go. DO NOT EDIT.
// source: auth.proto

package api

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type TokenWrapper struct {
	Token                string   `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TokenWrapper) Reset()         { *m = TokenWrapper{} }
func (m *TokenWrapper) String() string { return proto.CompactTextString(m) }
func (*TokenWrapper) ProtoMessage()    {}
func (*TokenWrapper) Descriptor() ([]byte, []int) {
	return fileDescriptor_8bbd6f3875b0e874, []int{0}
}

func (m *TokenWrapper) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TokenWrapper.Unmarshal(m, b)
}
func (m *TokenWrapper) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TokenWrapper.Marshal(b, m, deterministic)
}
func (m *TokenWrapper) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TokenWrapper.Merge(m, src)
}
func (m *TokenWrapper) XXX_Size() int {
	return xxx_messageInfo_TokenWrapper.Size(m)
}
func (m *TokenWrapper) XXX_DiscardUnknown() {
	xxx_messageInfo_TokenWrapper.DiscardUnknown(m)
}

var xxx_messageInfo_TokenWrapper proto.InternalMessageInfo

func (m *TokenWrapper) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

type IsValidTokenRequest struct {
	Token                *TokenWrapper `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *IsValidTokenRequest) Reset()         { *m = IsValidTokenRequest{} }
func (m *IsValidTokenRequest) String() string { return proto.CompactTextString(m) }
func (*IsValidTokenRequest) ProtoMessage()    {}
func (*IsValidTokenRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8bbd6f3875b0e874, []int{1}
}

func (m *IsValidTokenRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IsValidTokenRequest.Unmarshal(m, b)
}
func (m *IsValidTokenRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IsValidTokenRequest.Marshal(b, m, deterministic)
}
func (m *IsValidTokenRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IsValidTokenRequest.Merge(m, src)
}
func (m *IsValidTokenRequest) XXX_Size() int {
	return xxx_messageInfo_IsValidTokenRequest.Size(m)
}
func (m *IsValidTokenRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_IsValidTokenRequest.DiscardUnknown(m)
}

var xxx_messageInfo_IsValidTokenRequest proto.InternalMessageInfo

func (m *IsValidTokenRequest) GetToken() *TokenWrapper {
	if m != nil {
		return m.Token
	}
	return nil
}

type IsWorkspaceAuthenticatedRequest struct {
	FQDN                 string   `protobuf:"bytes,1,opt,name=FQDN,proto3" json:"FQDN,omitempty"`
	XOriginalMethod      string   `protobuf:"bytes,2,opt,name=XOriginalMethod,proto3" json:"XOriginalMethod,omitempty"`
	XOriginalAuthority   string   `protobuf:"bytes,3,opt,name=XOriginalAuthority,proto3" json:"XOriginalAuthority,omitempty"`
	XOriginalUri         string   `protobuf:"bytes,4,opt,name=XOriginalUri,proto3" json:"XOriginalUri,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IsWorkspaceAuthenticatedRequest) Reset()         { *m = IsWorkspaceAuthenticatedRequest{} }
func (m *IsWorkspaceAuthenticatedRequest) String() string { return proto.CompactTextString(m) }
func (*IsWorkspaceAuthenticatedRequest) ProtoMessage()    {}
func (*IsWorkspaceAuthenticatedRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8bbd6f3875b0e874, []int{2}
}

func (m *IsWorkspaceAuthenticatedRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IsWorkspaceAuthenticatedRequest.Unmarshal(m, b)
}
func (m *IsWorkspaceAuthenticatedRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IsWorkspaceAuthenticatedRequest.Marshal(b, m, deterministic)
}
func (m *IsWorkspaceAuthenticatedRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IsWorkspaceAuthenticatedRequest.Merge(m, src)
}
func (m *IsWorkspaceAuthenticatedRequest) XXX_Size() int {
	return xxx_messageInfo_IsWorkspaceAuthenticatedRequest.Size(m)
}
func (m *IsWorkspaceAuthenticatedRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_IsWorkspaceAuthenticatedRequest.DiscardUnknown(m)
}

var xxx_messageInfo_IsWorkspaceAuthenticatedRequest proto.InternalMessageInfo

func (m *IsWorkspaceAuthenticatedRequest) GetFQDN() string {
	if m != nil {
		return m.FQDN
	}
	return ""
}

func (m *IsWorkspaceAuthenticatedRequest) GetXOriginalMethod() string {
	if m != nil {
		return m.XOriginalMethod
	}
	return ""
}

func (m *IsWorkspaceAuthenticatedRequest) GetXOriginalAuthority() string {
	if m != nil {
		return m.XOriginalAuthority
	}
	return ""
}

func (m *IsWorkspaceAuthenticatedRequest) GetXOriginalUri() string {
	if m != nil {
		return m.XOriginalUri
	}
	return ""
}

func init() {
	proto.RegisterType((*TokenWrapper)(nil), "api.TokenWrapper")
	proto.RegisterType((*IsValidTokenRequest)(nil), "api.IsValidTokenRequest")
	proto.RegisterType((*IsWorkspaceAuthenticatedRequest)(nil), "api.IsWorkspaceAuthenticatedRequest")
}

func init() {
	proto.RegisterFile("auth.proto", fileDescriptor_8bbd6f3875b0e874)
}

var fileDescriptor_8bbd6f3875b0e874 = []byte{
	// 354 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x91, 0xcf, 0x4e, 0x22, 0x41,
	0x10, 0xc6, 0x33, 0xc0, 0x6e, 0xb2, 0x05, 0xc9, 0x66, 0x7b, 0x8d, 0xe9, 0xa0, 0x89, 0x38, 0x21,
	0x81, 0x53, 0x4f, 0xc0, 0x9b, 0x07, 0x13, 0x0c, 0x18, 0x39, 0xa8, 0x11, 0xff, 0xe0, 0xb5, 0x81,
	0x12, 0x3a, 0xe0, 0x74, 0xdb, 0x53, 0x43, 0xc2, 0x95, 0x57, 0xf0, 0x51, 0x7c, 0x14, 0x5f, 0xc1,
	0xd7, 0x30, 0x31, 0xd3, 0x03, 0x04, 0x0d, 0x78, 0x9b, 0xfa, 0xbe, 0xaf, 0xaa, 0x6b, 0x7e, 0x05,
	0x20, 0x63, 0x1a, 0x09, 0x63, 0x35, 0x69, 0x96, 0x95, 0x46, 0x15, 0xf7, 0x87, 0x5a, 0x0f, 0x27,
	0x18, 0x48, 0xa3, 0x02, 0x19, 0x86, 0x9a, 0x24, 0x29, 0x1d, 0x46, 0x69, 0xa4, 0xb8, 0xb7, 0x70,
	0x5d, 0xd5, 0x8b, 0x1f, 0x03, 0x7c, 0x32, 0x34, 0x4b, 0x4d, 0xbf, 0x0c, 0x85, 0x5b, 0x3d, 0xc6,
	0xb0, 0x6b, 0xa5, 0x31, 0x68, 0xd9, 0x0e, 0xfc, 0xa2, 0xa4, 0xe6, 0x5e, 0xc9, 0xab, 0xfe, 0xe9,
	0xa4, 0x85, 0x7f, 0x02, 0xff, 0xdb, 0xd1, 0xbd, 0x9c, 0xa8, 0x81, 0x0b, 0x77, 0xf0, 0x39, 0xc6,
	0x88, 0x58, 0x65, 0x3d, 0x9c, 0xaf, 0xff, 0x13, 0xd2, 0x28, 0xb1, 0x3e, 0x6e, 0xd9, 0xff, 0xea,
	0xc1, 0x41, 0x3b, 0xea, 0x6a, 0x3b, 0x8e, 0x8c, 0xec, 0x63, 0x23, 0xa6, 0x11, 0x86, 0xa4, 0xfa,
	0x92, 0x70, 0xb0, 0x1c, 0xc6, 0x20, 0x77, 0x76, 0xdd, 0xbc, 0x5c, 0x3c, 0xec, 0xbe, 0x59, 0x15,
	0xfe, 0x3e, 0x5c, 0x59, 0x35, 0x54, 0xa1, 0x9c, 0x5c, 0x20, 0x8d, 0xf4, 0x80, 0x67, 0x9c, 0xfd,
	0x5d, 0x66, 0x02, 0xd8, 0x4a, 0x4a, 0xc6, 0x6b, 0xab, 0x68, 0xc6, 0xb3, 0x2e, 0xbc, 0xc1, 0x61,
	0x3e, 0x14, 0x56, 0xea, 0x9d, 0x55, 0x3c, 0xe7, 0x92, 0x5f, 0xb4, 0xfa, 0x87, 0x07, 0xf9, 0xa4,
	0xe3, 0x06, 0xed, 0x54, 0xf5, 0x91, 0x29, 0x28, 0xac, 0x53, 0x60, 0xdc, 0xfd, 0xef, 0x06, 0x30,
	0xc5, 0x5d, 0x91, 0x32, 0x17, 0x4b, 0xe6, 0xa2, 0x95, 0x30, 0xf7, 0x2b, 0xf3, 0xb7, 0xf7, 0x97,
	0xcc, 0xa1, 0xcf, 0x93, 0x53, 0x45, 0xc1, 0xb4, 0xd6, 0x43, 0x92, 0xb5, 0x20, 0xb9, 0x67, 0xe0,
	0x48, 0x1d, 0xa7, 0xc0, 0xd8, 0xdc, 0x03, 0xbe, 0x0d, 0x18, 0x2b, 0x2f, 0xde, 0xfd, 0x91, 0xe7,
	0xd6, 0x1d, 0xaa, 0x6e, 0x07, 0xff, 0xb4, 0x04, 0xb9, 0xf3, 0x56, 0xa3, 0xc9, 0xb6, 0xee, 0xd2,
	0xfb, 0xed, 0x3a, 0x8f, 0x3e, 0x03, 0x00, 0x00, 0xff, 0xff, 0xbd, 0xad, 0x09, 0x35, 0x70, 0x02,
	0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// AuthServiceClient is the client API for AuthService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AuthServiceClient interface {
	IsValidToken(ctx context.Context, in *IsValidTokenRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	IsWorkspaceAuthenticated(ctx context.Context, in *IsWorkspaceAuthenticatedRequest, opts ...grpc.CallOption) (*empty.Empty, error)
}

type authServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthServiceClient(cc grpc.ClientConnInterface) AuthServiceClient {
	return &authServiceClient{cc}
}

func (c *authServiceClient) IsValidToken(ctx context.Context, in *IsValidTokenRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/api.AuthService/IsValidToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) IsWorkspaceAuthenticated(ctx context.Context, in *IsWorkspaceAuthenticatedRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/api.AuthService/IsWorkspaceAuthenticated", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthServiceServer is the server API for AuthService service.
type AuthServiceServer interface {
	IsValidToken(context.Context, *IsValidTokenRequest) (*empty.Empty, error)
	IsWorkspaceAuthenticated(context.Context, *IsWorkspaceAuthenticatedRequest) (*empty.Empty, error)
}

// UnimplementedAuthServiceServer can be embedded to have forward compatible implementations.
type UnimplementedAuthServiceServer struct {
}

func (*UnimplementedAuthServiceServer) IsValidToken(ctx context.Context, req *IsValidTokenRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsValidToken not implemented")
}
func (*UnimplementedAuthServiceServer) IsWorkspaceAuthenticated(ctx context.Context, req *IsWorkspaceAuthenticatedRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsWorkspaceAuthenticated not implemented")
}

func RegisterAuthServiceServer(s *grpc.Server, srv AuthServiceServer) {
	s.RegisterService(&_AuthService_serviceDesc, srv)
}

func _AuthService_IsValidToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsValidTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).IsValidToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.AuthService/IsValidToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).IsValidToken(ctx, req.(*IsValidTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_IsWorkspaceAuthenticated_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsWorkspaceAuthenticatedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).IsWorkspaceAuthenticated(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.AuthService/IsWorkspaceAuthenticated",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).IsWorkspaceAuthenticated(ctx, req.(*IsWorkspaceAuthenticatedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _AuthService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.AuthService",
	HandlerType: (*AuthServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "IsValidToken",
			Handler:    _AuthService_IsValidToken_Handler,
		},
		{
			MethodName: "IsWorkspaceAuthenticated",
			Handler:    _AuthService_IsWorkspaceAuthenticated_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "auth.proto",
}
