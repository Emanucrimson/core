syntax = "proto3";

package api;

import "google/protobuf/empty.proto";
import "google/api/annotations.proto";

service SecretService {
    rpc CreateSecret (CreateSecretRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/apis/v1beta1/{namespace}/secrets"
            body: "secret"
        };
    }

    rpc SecretExists(SecretExistsRequest) returns (SecretExistsResponse) {
        option (google.api.http) = {
            get: "/apis/v1beta1/{namespace}/secrets/{name}/exists"
        };
    }

    rpc GetSecret (GetSecretRequest) returns (Secret) {
        option (google.api.http) = {
            get: "/apis/v1beta1/{namespace}/secrets/{name}"
        };
    }

    rpc ListSecrets(GetSecretsRequest) returns (Secrets) {
        option (google.api.http) = {
            get: "/apis/v1beta1/{namespace}/secrets"
        };
    }

    rpc DeleteSecret(DeleteSecretRequest) returns (DeleteSecretResponse) {
        option (google.api.http) = {
            delete: "/apis/v1beta1/{namespace}/secrets/{name}"
        };
    }

    rpc DeleteSecretKey(DeleteSecretKeyRequest) returns (DeleteSecretKeyResponse) {
        option (google.api.http) = {
            delete: "/apis/v1beta1/{namespace}/secrets/{secret.name}"
        };
    }

    rpc AddSecretKeyValue (AddSecretValueRequest) returns (AddSecretValueResponse) {
        option (google.api.http) = {
            post: "/apis/v1beta1/{namespace}/secrets/{secret.name}"
            body: "secret"
        };
    }

    rpc UpdateSecretKeyValue(UpdateSecretKeyValueRequest) returns (UpdateSecretKeyValueResponse) {
        option (google.api.http) = {
            patch: "/apis/v1beta1/{namespace}/secrets/{secret.name}"
        };
    }

}

message AddSecretValueRequest {
    string namespace = 1;
    Secret secret = 2;
}

message AddSecretValueResponse {
    bool inserted = 1;
}

message AddSecretBody {
    string key = 1;
    string value = 2;
}

message SecretExistsRequest {
    string namespace = 1;
    string name = 2;
}

message SecretExistsResponse {
    bool exists = 1;
}

message UpdateSecretKeyValueRequest {
    string namespace = 1;
    Secret secret = 2;

}

message UpdateSecretKeyValueResponse {
    bool updated = 1;
}

message DeleteSecretRequest {
    string namespace = 1;
    string name = 2;
}

message DeleteSecretKeyRequest {
    string namespace = 1;
    Secret secret = 2;
}

message DeleteSecretKeyResponse {
    bool deleted = 1;
}

message DeleteSecretResponse {
    bool deleted = 1;
}

message GetSecretsRequest {
    string namespace = 1;
}

message CreateSecretRequest {
    string namespace = 1;
    Secret secret = 2;
}

message GetSecretRequest {
    string namespace = 1;
    string name = 2;
}

message Secret {
    string name = 1;
    map<string, string> data = 2;
}

message Secrets {
    repeated Secret secrets = 1;
}
