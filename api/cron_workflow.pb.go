// Code generated by protoc-gen-go. DO NOT EDIT.
// source: cron_workflow.proto

package api

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/golang/protobuf/ptypes/empty"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type GetCronWorkflowRequest struct {
	Namespace            string   `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetCronWorkflowRequest) Reset()         { *m = GetCronWorkflowRequest{} }
func (m *GetCronWorkflowRequest) String() string { return proto.CompactTextString(m) }
func (*GetCronWorkflowRequest) ProtoMessage()    {}
func (*GetCronWorkflowRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_989cccaad551a50c, []int{0}
}

func (m *GetCronWorkflowRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetCronWorkflowRequest.Unmarshal(m, b)
}
func (m *GetCronWorkflowRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetCronWorkflowRequest.Marshal(b, m, deterministic)
}
func (m *GetCronWorkflowRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetCronWorkflowRequest.Merge(m, src)
}
func (m *GetCronWorkflowRequest) XXX_Size() int {
	return xxx_messageInfo_GetCronWorkflowRequest.Size(m)
}
func (m *GetCronWorkflowRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetCronWorkflowRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetCronWorkflowRequest proto.InternalMessageInfo

func (m *GetCronWorkflowRequest) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *GetCronWorkflowRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type CreateCronWorkflowRequest struct {
	Namespace            string        `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	CronWorkflow         *CronWorkflow `protobuf:"bytes,2,opt,name=cronWorkflow,proto3" json:"cronWorkflow,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *CreateCronWorkflowRequest) Reset()         { *m = CreateCronWorkflowRequest{} }
func (m *CreateCronWorkflowRequest) String() string { return proto.CompactTextString(m) }
func (*CreateCronWorkflowRequest) ProtoMessage()    {}
func (*CreateCronWorkflowRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_989cccaad551a50c, []int{1}
}

func (m *CreateCronWorkflowRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateCronWorkflowRequest.Unmarshal(m, b)
}
func (m *CreateCronWorkflowRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateCronWorkflowRequest.Marshal(b, m, deterministic)
}
func (m *CreateCronWorkflowRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateCronWorkflowRequest.Merge(m, src)
}
func (m *CreateCronWorkflowRequest) XXX_Size() int {
	return xxx_messageInfo_CreateCronWorkflowRequest.Size(m)
}
func (m *CreateCronWorkflowRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateCronWorkflowRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateCronWorkflowRequest proto.InternalMessageInfo

func (m *CreateCronWorkflowRequest) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *CreateCronWorkflowRequest) GetCronWorkflow() *CronWorkflow {
	if m != nil {
		return m.CronWorkflow
	}
	return nil
}

type ListCronWorkflowRequest struct {
	Namespace            string   `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	PageSize             int32    `protobuf:"varint,4,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
	Page                 int32    `protobuf:"varint,5,opt,name=page,proto3" json:"page,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListCronWorkflowRequest) Reset()         { *m = ListCronWorkflowRequest{} }
func (m *ListCronWorkflowRequest) String() string { return proto.CompactTextString(m) }
func (*ListCronWorkflowRequest) ProtoMessage()    {}
func (*ListCronWorkflowRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_989cccaad551a50c, []int{2}
}

func (m *ListCronWorkflowRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListCronWorkflowRequest.Unmarshal(m, b)
}
func (m *ListCronWorkflowRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListCronWorkflowRequest.Marshal(b, m, deterministic)
}
func (m *ListCronWorkflowRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListCronWorkflowRequest.Merge(m, src)
}
func (m *ListCronWorkflowRequest) XXX_Size() int {
	return xxx_messageInfo_ListCronWorkflowRequest.Size(m)
}
func (m *ListCronWorkflowRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListCronWorkflowRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListCronWorkflowRequest proto.InternalMessageInfo

func (m *ListCronWorkflowRequest) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *ListCronWorkflowRequest) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

func (m *ListCronWorkflowRequest) GetPage() int32 {
	if m != nil {
		return m.Page
	}
	return 0
}

type ListCronWorkflowsResponse struct {
	Count                int32           `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	CronWorkflows        []*CronWorkflow `protobuf:"bytes,2,rep,name=cronWorkflows,proto3" json:"cronWorkflows,omitempty"`
	Page                 int32           `protobuf:"varint,3,opt,name=page,proto3" json:"page,omitempty"`
	Pages                int32           `protobuf:"varint,4,opt,name=pages,proto3" json:"pages,omitempty"`
	TotalCount           int32           `protobuf:"varint,5,opt,name=totalCount,proto3" json:"totalCount,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *ListCronWorkflowsResponse) Reset()         { *m = ListCronWorkflowsResponse{} }
func (m *ListCronWorkflowsResponse) String() string { return proto.CompactTextString(m) }
func (*ListCronWorkflowsResponse) ProtoMessage()    {}
func (*ListCronWorkflowsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_989cccaad551a50c, []int{3}
}

func (m *ListCronWorkflowsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListCronWorkflowsResponse.Unmarshal(m, b)
}
func (m *ListCronWorkflowsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListCronWorkflowsResponse.Marshal(b, m, deterministic)
}
func (m *ListCronWorkflowsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListCronWorkflowsResponse.Merge(m, src)
}
func (m *ListCronWorkflowsResponse) XXX_Size() int {
	return xxx_messageInfo_ListCronWorkflowsResponse.Size(m)
}
func (m *ListCronWorkflowsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListCronWorkflowsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListCronWorkflowsResponse proto.InternalMessageInfo

func (m *ListCronWorkflowsResponse) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *ListCronWorkflowsResponse) GetCronWorkflows() []*CronWorkflow {
	if m != nil {
		return m.CronWorkflows
	}
	return nil
}

func (m *ListCronWorkflowsResponse) GetPage() int32 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *ListCronWorkflowsResponse) GetPages() int32 {
	if m != nil {
		return m.Pages
	}
	return 0
}

func (m *ListCronWorkflowsResponse) GetTotalCount() int32 {
	if m != nil {
		return m.TotalCount
	}
	return 0
}

type CronWorkflow struct {
	Schedule                   string             `protobuf:"bytes,1,opt,name=schedule,proto3" json:"schedule,omitempty"`
	Timezone                   string             `protobuf:"bytes,2,opt,name=timezone,proto3" json:"timezone,omitempty"`
	Suspend                    bool               `protobuf:"varint,3,opt,name=suspend,proto3" json:"suspend,omitempty"`
	ConcurrencyPolicy          string             `protobuf:"bytes,4,opt,name=concurrencyPolicy,proto3" json:"concurrencyPolicy,omitempty"`
	StartingDeadlineSeconds    int64              `protobuf:"varint,5,opt,name=startingDeadlineSeconds,proto3" json:"startingDeadlineSeconds,omitempty"`
	SuccessfulJobsHistoryLimit int32              `protobuf:"varint,6,opt,name=successfulJobsHistoryLimit,proto3" json:"successfulJobsHistoryLimit,omitempty"`
	FailedJobsHistoryLimit     int32              `protobuf:"varint,7,opt,name=failedJobsHistoryLimit,proto3" json:"failedJobsHistoryLimit,omitempty"`
	WorkflowExecution          *WorkflowExecution `protobuf:"bytes,8,opt,name=workflowExecution,proto3" json:"workflowExecution,omitempty"`
	XXX_NoUnkeyedLiteral       struct{}           `json:"-"`
	XXX_unrecognized           []byte             `json:"-"`
	XXX_sizecache              int32              `json:"-"`
}

func (m *CronWorkflow) Reset()         { *m = CronWorkflow{} }
func (m *CronWorkflow) String() string { return proto.CompactTextString(m) }
func (*CronWorkflow) ProtoMessage()    {}
func (*CronWorkflow) Descriptor() ([]byte, []int) {
	return fileDescriptor_989cccaad551a50c, []int{4}
}

func (m *CronWorkflow) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CronWorkflow.Unmarshal(m, b)
}
func (m *CronWorkflow) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CronWorkflow.Marshal(b, m, deterministic)
}
func (m *CronWorkflow) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CronWorkflow.Merge(m, src)
}
func (m *CronWorkflow) XXX_Size() int {
	return xxx_messageInfo_CronWorkflow.Size(m)
}
func (m *CronWorkflow) XXX_DiscardUnknown() {
	xxx_messageInfo_CronWorkflow.DiscardUnknown(m)
}

var xxx_messageInfo_CronWorkflow proto.InternalMessageInfo

func (m *CronWorkflow) GetSchedule() string {
	if m != nil {
		return m.Schedule
	}
	return ""
}

func (m *CronWorkflow) GetTimezone() string {
	if m != nil {
		return m.Timezone
	}
	return ""
}

func (m *CronWorkflow) GetSuspend() bool {
	if m != nil {
		return m.Suspend
	}
	return false
}

func (m *CronWorkflow) GetConcurrencyPolicy() string {
	if m != nil {
		return m.ConcurrencyPolicy
	}
	return ""
}

func (m *CronWorkflow) GetStartingDeadlineSeconds() int64 {
	if m != nil {
		return m.StartingDeadlineSeconds
	}
	return 0
}

func (m *CronWorkflow) GetSuccessfulJobsHistoryLimit() int32 {
	if m != nil {
		return m.SuccessfulJobsHistoryLimit
	}
	return 0
}

func (m *CronWorkflow) GetFailedJobsHistoryLimit() int32 {
	if m != nil {
		return m.FailedJobsHistoryLimit
	}
	return 0
}

func (m *CronWorkflow) GetWorkflowExecution() *WorkflowExecution {
	if m != nil {
		return m.WorkflowExecution
	}
	return nil
}

func init() {
	proto.RegisterType((*GetCronWorkflowRequest)(nil), "api.GetCronWorkflowRequest")
	proto.RegisterType((*CreateCronWorkflowRequest)(nil), "api.CreateCronWorkflowRequest")
	proto.RegisterType((*ListCronWorkflowRequest)(nil), "api.ListCronWorkflowRequest")
	proto.RegisterType((*ListCronWorkflowsResponse)(nil), "api.ListCronWorkflowsResponse")
	proto.RegisterType((*CronWorkflow)(nil), "api.CronWorkflow")
}

func init() {
	proto.RegisterFile("cron_workflow.proto", fileDescriptor_989cccaad551a50c)
}

var fileDescriptor_989cccaad551a50c = []byte{
	// 601 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x54, 0xdd, 0x6e, 0xd3, 0x30,
	0x18, 0x55, 0x96, 0x75, 0x3f, 0x1f, 0x03, 0x54, 0x0f, 0x6d, 0x59, 0x36, 0x4d, 0x53, 0x6e, 0x98,
	0x10, 0x6a, 0xb6, 0x21, 0x36, 0x84, 0x04, 0x37, 0x1d, 0x02, 0x4d, 0xbb, 0x40, 0xe9, 0xc5, 0x2e,
	0x27, 0xd7, 0xfd, 0x5a, 0x2c, 0x12, 0x3b, 0xc4, 0xce, 0x46, 0x87, 0x76, 0x03, 0xd2, 0x5e, 0x80,
	0x07, 0xe0, 0x25, 0x78, 0x13, 0x5e, 0x81, 0x07, 0x41, 0x71, 0xd2, 0xac, 0x69, 0x5a, 0x34, 0xb8,
	0x8a, 0x8f, 0xcf, 0x67, 0x9f, 0xe3, 0xd8, 0xe7, 0x83, 0x55, 0x96, 0x48, 0x71, 0x7e, 0x29, 0x93,
	0x8f, 0xfd, 0x50, 0x5e, 0xb6, 0xe2, 0x44, 0x6a, 0x49, 0x6c, 0x1a, 0x73, 0x77, 0x6b, 0x20, 0xe5,
	0x20, 0x44, 0x9f, 0xc6, 0xdc, 0xa7, 0x42, 0x48, 0x4d, 0x35, 0x97, 0x42, 0xe5, 0x25, 0xee, 0x66,
	0xc1, 0x1a, 0xd4, 0x4d, 0xfb, 0x3e, 0x46, 0xb1, 0x1e, 0x16, 0xe4, 0xfa, 0x68, 0xbf, 0x73, 0x8d,
	0x51, 0x1c, 0x52, 0x8d, 0x05, 0xf1, 0xa0, 0x2a, 0xe4, 0xae, 0x44, 0xa8, 0x13, 0xce, 0x72, 0xe4,
	0x9d, 0xc0, 0xda, 0x5b, 0xd4, 0xed, 0x44, 0x8a, 0xb3, 0xa2, 0x2c, 0xc0, 0x4f, 0x29, 0x2a, 0x4d,
	0xb6, 0x60, 0x59, 0xd0, 0x08, 0x55, 0x4c, 0x19, 0x3a, 0xd6, 0x8e, 0xb5, 0xbb, 0x1c, 0xdc, 0x4e,
	0x10, 0x02, 0xf3, 0x19, 0x70, 0xe6, 0x0c, 0x61, 0xc6, 0x5e, 0x0c, 0x1b, 0xed, 0x04, 0xa9, 0xc6,
	0x7f, 0xdf, 0xee, 0x39, 0xac, 0xb0, 0xb1, 0x45, 0x66, 0xdb, 0x7b, 0x07, 0xcd, 0x16, 0x8d, 0x79,
	0xab, 0xb2, 0x5b, 0xa5, 0xcc, 0x1b, 0xc0, 0xfa, 0x29, 0x57, 0xff, 0x61, 0xdf, 0x85, 0xa5, 0x98,
	0x0e, 0xb0, 0xc3, 0xaf, 0xd0, 0x99, 0xdf, 0xb1, 0x76, 0x1b, 0x41, 0x89, 0xb3, 0xa3, 0x65, 0x63,
	0xa7, 0x61, 0xe6, 0xcd, 0xd8, 0xfb, 0x69, 0xc1, 0xc6, 0xa4, 0x92, 0x0a, 0x50, 0xc5, 0x52, 0x28,
	0x24, 0x8f, 0xa0, 0xc1, 0x64, 0x2a, 0xb4, 0xd1, 0x69, 0x04, 0x39, 0x20, 0x47, 0x70, 0x7f, 0xdc,
	0xac, 0x72, 0xe6, 0x76, 0xec, 0xe9, 0x87, 0xaa, 0xd6, 0x95, 0x06, 0xec, 0x5b, 0x03, 0x99, 0x44,
	0xf6, 0x55, 0x85, 0xdb, 0x1c, 0x90, 0x6d, 0x00, 0x2d, 0x35, 0x0d, 0xdb, 0x46, 0x3d, 0x37, 0x3c,
	0x36, 0xe3, 0xdd, 0xd8, 0xb0, 0x32, 0xae, 0x94, 0x9d, 0x5b, 0xb1, 0x0f, 0xd8, 0x4b, 0xc3, 0xd1,
	0x4f, 0x29, 0x71, 0xc6, 0x69, 0x1e, 0xe1, 0x95, 0x14, 0xa3, 0x6b, 0x2d, 0x31, 0x71, 0x60, 0x51,
	0xa5, 0x2a, 0x46, 0xd1, 0x33, 0xae, 0x96, 0x82, 0x11, 0x24, 0x4f, 0xa1, 0xc9, 0xa4, 0x60, 0x69,
	0x92, 0xa0, 0x60, 0xc3, 0xf7, 0x32, 0xe4, 0x6c, 0x68, 0x4c, 0x2e, 0x07, 0x75, 0x82, 0xbc, 0x80,
	0x75, 0xa5, 0x69, 0xa2, 0xb9, 0x18, 0x1c, 0x23, 0xed, 0x85, 0x5c, 0x60, 0x07, 0x99, 0x14, 0x3d,
	0x65, 0xdc, 0xdb, 0xc1, 0x2c, 0x9a, 0xbc, 0x06, 0x57, 0xa5, 0x8c, 0xa1, 0x52, 0xfd, 0x34, 0x3c,
	0x91, 0x5d, 0xf5, 0x8e, 0x2b, 0x2d, 0x93, 0xe1, 0x29, 0x8f, 0xb8, 0x76, 0x16, 0xcc, 0xd1, 0xff,
	0x52, 0x41, 0x0e, 0x61, 0xad, 0x4f, 0x79, 0x88, 0xbd, 0xda, 0xda, 0x45, 0xb3, 0x76, 0x06, 0x4b,
	0x8e, 0xa1, 0x39, 0x0a, 0xd0, 0x9b, 0xcf, 0xc8, 0xd2, 0x2c, 0x90, 0xce, 0x92, 0x79, 0x9e, 0x6b,
	0xe6, 0x26, 0xcf, 0x26, 0xd9, 0xa0, 0xbe, 0xe0, 0xe0, 0x87, 0x0d, 0xab, 0xe3, 0x17, 0xd1, 0xc1,
	0xe4, 0x82, 0x33, 0x24, 0x37, 0x16, 0x90, 0x7a, 0x66, 0xc8, 0x76, 0xf1, 0x46, 0x66, 0x84, 0xc9,
	0xad, 0xbf, 0x21, 0xef, 0xd5, 0xd7, 0x5f, 0xbf, 0xbf, 0xcf, 0x1d, 0x79, 0x8f, 0xb3, 0xe6, 0xa1,
	0xfc, 0x8b, 0xfd, 0x2e, 0x6a, 0xba, 0xef, 0x7f, 0x29, 0xdf, 0xfc, 0xb5, 0x5f, 0x69, 0x3b, 0x2f,
	0x2b, 0x49, 0x22, 0x43, 0x78, 0x38, 0xd1, 0x07, 0xc8, 0xa6, 0x11, 0x99, 0xde, 0x1d, 0xa6, 0x39,
	0x38, 0x34, 0x0e, 0xf6, 0x48, 0xeb, 0x8e, 0x0e, 0x72, 0xe6, 0x9a, 0x7c, 0xb3, 0xa0, 0x59, 0xcb,
	0x16, 0xd9, 0x32, 0x02, 0x33, 0xd2, 0xed, 0x6e, 0x4f, 0x65, 0xcb, 0x44, 0x7a, 0x7b, 0xc6, 0xcb,
	0x13, 0xb2, 0x7b, 0x47, 0x2f, 0xaa, 0xbb, 0x60, 0xfa, 0xe1, 0xb3, 0x3f, 0x01, 0x00, 0x00, 0xff,
	0xff, 0xea, 0x3f, 0xb3, 0x0d, 0x9d, 0x05, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// CronWorkflowServiceClient is the client API for CronWorkflowService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CronWorkflowServiceClient interface {
	CreateCronWorkflow(ctx context.Context, in *CreateCronWorkflowRequest, opts ...grpc.CallOption) (*CronWorkflow, error)
	GetCronWorkflow(ctx context.Context, in *GetCronWorkflowRequest, opts ...grpc.CallOption) (*CronWorkflow, error)
	ListCronWorkflows(ctx context.Context, in *ListCronWorkflowRequest, opts ...grpc.CallOption) (*ListCronWorkflowsResponse, error)
}

type cronWorkflowServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCronWorkflowServiceClient(cc grpc.ClientConnInterface) CronWorkflowServiceClient {
	return &cronWorkflowServiceClient{cc}
}

func (c *cronWorkflowServiceClient) CreateCronWorkflow(ctx context.Context, in *CreateCronWorkflowRequest, opts ...grpc.CallOption) (*CronWorkflow, error) {
	out := new(CronWorkflow)
	err := c.cc.Invoke(ctx, "/api.CronWorkflowService/CreateCronWorkflow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cronWorkflowServiceClient) GetCronWorkflow(ctx context.Context, in *GetCronWorkflowRequest, opts ...grpc.CallOption) (*CronWorkflow, error) {
	out := new(CronWorkflow)
	err := c.cc.Invoke(ctx, "/api.CronWorkflowService/GetCronWorkflow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cronWorkflowServiceClient) ListCronWorkflows(ctx context.Context, in *ListCronWorkflowRequest, opts ...grpc.CallOption) (*ListCronWorkflowsResponse, error) {
	out := new(ListCronWorkflowsResponse)
	err := c.cc.Invoke(ctx, "/api.CronWorkflowService/ListCronWorkflows", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CronWorkflowServiceServer is the server API for CronWorkflowService service.
type CronWorkflowServiceServer interface {
	CreateCronWorkflow(context.Context, *CreateCronWorkflowRequest) (*CronWorkflow, error)
	GetCronWorkflow(context.Context, *GetCronWorkflowRequest) (*CronWorkflow, error)
	ListCronWorkflows(context.Context, *ListCronWorkflowRequest) (*ListCronWorkflowsResponse, error)
}

// UnimplementedCronWorkflowServiceServer can be embedded to have forward compatible implementations.
type UnimplementedCronWorkflowServiceServer struct {
}

func (*UnimplementedCronWorkflowServiceServer) CreateCronWorkflow(ctx context.Context, req *CreateCronWorkflowRequest) (*CronWorkflow, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCronWorkflow not implemented")
}
func (*UnimplementedCronWorkflowServiceServer) GetCronWorkflow(ctx context.Context, req *GetCronWorkflowRequest) (*CronWorkflow, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCronWorkflow not implemented")
}
func (*UnimplementedCronWorkflowServiceServer) ListCronWorkflows(ctx context.Context, req *ListCronWorkflowRequest) (*ListCronWorkflowsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCronWorkflows not implemented")
}

func RegisterCronWorkflowServiceServer(s *grpc.Server, srv CronWorkflowServiceServer) {
	s.RegisterService(&_CronWorkflowService_serviceDesc, srv)
}

func _CronWorkflowService_CreateCronWorkflow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCronWorkflowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CronWorkflowServiceServer).CreateCronWorkflow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.CronWorkflowService/CreateCronWorkflow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CronWorkflowServiceServer).CreateCronWorkflow(ctx, req.(*CreateCronWorkflowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CronWorkflowService_GetCronWorkflow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCronWorkflowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CronWorkflowServiceServer).GetCronWorkflow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.CronWorkflowService/GetCronWorkflow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CronWorkflowServiceServer).GetCronWorkflow(ctx, req.(*GetCronWorkflowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CronWorkflowService_ListCronWorkflows_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCronWorkflowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CronWorkflowServiceServer).ListCronWorkflows(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.CronWorkflowService/ListCronWorkflows",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CronWorkflowServiceServer).ListCronWorkflows(ctx, req.(*ListCronWorkflowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CronWorkflowService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.CronWorkflowService",
	HandlerType: (*CronWorkflowServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCronWorkflow",
			Handler:    _CronWorkflowService_CreateCronWorkflow_Handler,
		},
		{
			MethodName: "GetCronWorkflow",
			Handler:    _CronWorkflowService_GetCronWorkflow_Handler,
		},
		{
			MethodName: "ListCronWorkflows",
			Handler:    _CronWorkflowService_ListCronWorkflows_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cron_workflow.proto",
}
